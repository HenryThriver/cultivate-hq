import type { Contact, ProfessionalContext } from '@/types/contact';
import type { LinkedInArtifact, LinkedInArtifactContent } from '@/types/artifact';

/**
 * Processes the raw API response from a LinkedIn profile scrape.
 * Generates a structured LinkedIn artifact and synthesizes key information 
 * for updating the main contact record and its professional context.
 *
 * @param apiResponse - The raw JSON response from the LinkedIn profile API.
 * @param contactId - The ID of the contact this LinkedIn profile is associated with.
 * @returns An object containing `contactUpdates` (for the contacts table) 
 *          and `linkedinArtifact` (to be stored in the artifacts table).
 */
export const processLinkedInProfile = (apiResponse: any, contactId: string): {
  contactUpdates: Partial<Contact>;
  linkedinArtifact: LinkedInArtifact;
} => {
  
  // Create LinkedIn artifact with comprehensive data from the API response
  const linkedinArtifactContent: LinkedInArtifactContent = {
    profile_url: apiResponse.profile_url || apiResponse.public_identifier, // Use common variations
    headline: apiResponse.headline,
    about: apiResponse.summary || apiResponse.about, // Use common variations
    experience: apiResponse.experiences?.map((exp: any) => ({
      company: exp.companyName || exp.company,
      title: exp.title,
      duration: exp.dateRange ? `${exp.dateRange.start.month}/${exp.dateRange.start.year} - ${exp.dateRange.end ? exp.dateRange.end.month+'/'+exp.dateRange.end.year : 'Present'}` : exp.duration,
      description: exp.description
    })) || [],
    education: apiResponse.education?.map((edu: any) => ({
      school: edu.schoolName || edu.school,
      degree: edu.degreeName || edu.degree,
      field: edu.fieldOfStudy || edu.field,
      years: edu.dateRange ? `${edu.dateRange.start.year} - ${edu.dateRange.end ? edu.dateRange.end.year : 'Present'}` : edu.years
    })) || [],
    scraped_at: new Date().toISOString()
  };

  const linkedinArtifact: LinkedInArtifact = {
    id: '', // ID will be generated by Supabase upon insertion
    contact_id: contactId,
    user_id: '', // user_id will be set by the calling service/hook based on the authenticated user
    type: 'linkedin_profile',
    content: `LinkedIn Profile for ${apiResponse.firstName || ''} ${apiResponse.lastName || ''}`.trim() + (linkedinArtifactContent.headline ? ` - ${linkedinArtifactContent.headline}` : ''),
    metadata: linkedinArtifactContent,
    timestamp: linkedinArtifactContent.scraped_at,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
  };

  // Synthesize key data for the main contact record update
  const contactUpdates: Partial<Contact> = {
    // Basic Info - ensure name is constructed if only firstName/lastName are present
    name: (apiResponse.firstName && apiResponse.lastName) ? `${apiResponse.firstName} ${apiResponse.lastName}` : apiResponse.name,
    company: apiResponse.experiences?.[0]?.companyName || apiResponse.experiences?.[0]?.company,
    title: apiResponse.experiences?.[0]?.title,
    location: apiResponse.location?.basicLocation?.countryCode ? `${apiResponse.location.basicLocation.city}, ${apiResponse.location.basicLocation.countryCode}` : apiResponse.locationName,
    linkedin_url: linkedinArtifactContent.profile_url, // Ensure linkedin_url on contact is updated/set
    
    // Distill into professional context (a curated subset of LinkedIn data)
    professional_context: {
      // current_ventures might be better derived from multiple experiences or headline
      current_ventures: linkedinArtifactContent.headline, 
      background: {
        education: linkedinArtifactContent.education?.slice(0, 2).map(edu => 
          `${edu.school}${edu.degree ? ` (${edu.degree}${edu.field ? `, ${edu.field}` : ''})` : ''}`
        ),
        previous_companies: linkedinArtifactContent.experience?.slice(0, 4).map(exp => exp.company).filter(Boolean) as string[], // Take first few, filter out undefined/null
        expertise_areas: [], // This would likely come from skills or endorsements, not directly in basic profile.
        focus_areas: linkedinArtifactContent.about?.substring(0, 200) // A snippet from summary as focus area
      },
      // speaking_topics and achievements are not typically direct fields in basic LinkedIn scrapes, might need manual input or richer API.
      speaking_topics: [], 
      achievements: [], 
      goals: [], // Goals are not usually on a public LinkedIn profile
    } as any, // Cast to Json for database compatibility
    
    // The linkedin_data field on the Contact record itself
    linkedin_data: linkedinArtifactContent as any // Cast to Json for database compatibility
  };

  return { contactUpdates, linkedinArtifact };
}; 