# Connection OS Development Rules

## Tech Stack
- Next.js 14 with App Router and TypeScript
- Supabase for database and auth
- Material-UI (MUI) v5 for components
- Tailwind CSS for custom styling
- Zustand for client state management
- TanStack Query for server state

## Project Structure
src/
  app/                    # Next.js app router pages
    (dashboard)/          # Dashboard layout group
    globals.css
    layout.tsx
    page.tsx
  components/
    ui/                   # Reusable UI components
    features/             # Feature-specific components
  lib/
    supabase/            # Supabase client and types
    utils/               # Utility functions
    hooks/               # Custom hooks
    stores/              # Zustand stores
  types/                 # TypeScript type definitions

## Code Style Preferences

### TypeScript
- Use strict mode
- Prefer `interface` over `type` for object shapes
- Use `type` for unions and primitives
- Always define return types for functions
- Use proper generic constraints

### React Patterns
- Use functional components exclusively
- Prefer custom hooks for logic extraction
- Use React.memo() for expensive components
- Always use proper dependency arrays in useEffect

### Imports
- Group imports: React, third-party, internal components, utilities
- Use absolute imports with @ alias for src/
- Prefer named exports over default exports (except for pages)

### Component Structure
interface ComponentProps {
  // Props interface
}

export const ComponentName = ({ prop1, prop2 }: ComponentProps) => {
  // Hooks at top
  // Event handlers
  // Render logic
  
  return (
    // JSX
  );
};

### MUI + Tailwind Integration
- Use MUI components for structure (Box, Container, Typography)
- Use Tailwind for spacing, sizing, and custom styles
- Prefer MUI's sx prop over className when using MUI components
- Use Tailwind classes for layout and spacing

### Database Patterns
- Use Supabase generated types
- Create custom hooks for database operations
- Always handle loading and error states
- Use optimistic updates where appropriate

### File Naming
- Components: PascalCase (ContactCard.tsx)
- Hooks: camelCase starting with 'use' (useContacts.ts)
- Utilities: camelCase (formatDate.ts)
- Pages: lowercase with hyphens (contact-details/page.tsx)

### State Management
- Use Zustand for client-side state that needs to persist across components
- Use TanStack Query for server state and caching
- Keep component state local when possible
- Use proper TypeScript types for all stores

### Error Handling
- Always wrap API calls in try-catch
- Use React Error Boundaries for component errors
- Show user-friendly error messages
- Log errors for debugging

### Performance
- Use React.memo for expensive renders
- Implement proper loading states
- Use Suspense boundaries where appropriate
- Optimize images with Next.js Image component

## Supabase Conventions
### Project Setup
- My Supabase project ID is zepawphplcisievcdugz. At the beginning of a new chat link the project but after that do not invoke "--project-id zepawphplcisievcdugz" at the end of supabase commands because it isn't necessary and will simply apply to the linked to the project
- Make all changes in the cloud version of my supabase db. To do that successfully, run with the npx command "echo "Y" | npx supabase db push" so that it's auto applied
- Connect to the cloud project at the beginning of each chat thread

### ðŸ”’ DATABASE ACCESS - SECURITY FIRST
- **MANDATORY**: Always reference INITIATE.md Section 2 for secure database access patterns
- **NEVER hardcode credentials** - always use dynamic extraction via `npx supabase db dump --linked --dry-run`
- **Standard secure pattern**: `CONNECTION_STRING=$(npx supabase db dump --linked --dry-run 2>/dev/null | grep "postgresql://" | head -1)`
- **DATABASE_ACCESS_GUIDE.md exists locally** (gitignored for security) with comprehensive secure patterns
- **Always get fresh credentials** - don't reuse old connection strings

### Schema & Migration Management
- When creating migrations, use "python3 -c 'import datetime; print(datetime.datetime.now().strftime("%Y%m%d%H%M%S"))'" to get the proper datetime to name the migration file
- When applying migrations, apply them to the cloud instance where I am developing directly
- If you ever have questions about the database structure, look through the migrations to see how the database is built
- Generate types after schema changes: `npx supabase gen types typescript --linked > src/lib/supabase/database.types.ts`

### Development Patterns
- Use Row Level Security (RLS) for all tables
- Create typed clients using generated types
- Use real-time subscriptions sparingly
- Prefer edge functions for complex server logic

### ðŸ”§ SECURE DATABASE ACCESS QUICK REFERENCE
```bash
# Step 1: Get connection string (ALWAYS run this first)
CONNECTION_STRING=$(npx supabase db dump --linked --dry-run 2>/dev/null | grep "postgresql://" | head -1)

# Step 2: Use for queries
psql "$CONNECTION_STRING" -c "YOUR_SQL_QUERY_HERE"

# Common patterns:
psql "$CONNECTION_STRING" -c "\dt"  # List tables
psql "$CONNECTION_STRING" -c "\d contacts"  # Describe table
psql "$CONNECTION_STRING" -c "SELECT id, name FROM contacts WHERE name ILIKE '%search%';"
```
**For more patterns, see INITIATE.md Section 2 or local DATABASE_ACCESS_GUIDE.md**

## ðŸ“‹ DATABASE ACCESS DOCUMENTATION STRUCTURE
- **INITIATE.md Section 2**: Primary reference for secure database access patterns with copy-paste templates
- **DATABASE_ACCESS_GUIDE.md**: Comprehensive local-only guide (gitignored) with extensive secure query patterns
- **supabase/migrations/**: Schema history and structure reference
- **src/lib/supabase/database.types.ts**: Auto-generated TypeScript types

## ðŸš¨ CRITICAL DATABASE SAFETY RULES ðŸš¨
- **NEVER EVER run `npx supabase db reset` or any database reset commands that wipe all data**
- **NEVER suggest or execute commands that would delete or wipe the entire database**
- **NEVER run broad destructive commands without explicit user approval**
- **NEVER hardcode database credentials in any tracked files**
- **Always use migrations for schema changes, never destructive schema commands**
- **Always protect core user data - contacts, voice memos, and relationship intelligence**

## âœ… ALLOWED TARGETED OPERATIONS (with user approval)
- **Targeted deletions for testing** (e.g., DELETE FROM artifacts WHERE type = 'email' AND contact_id = 'specific-id')
- **Specific artifact cleanup** when testing AI processing pipelines
- **Removing test data** or corrupted data for specific contacts/artifacts
- **Always be explicit about what will be deleted and ask for confirmation**
- **Always provide the exact SQL command for user review before execution**
- **Always use secure credential extraction patterns from INITIATE.md**

## Artifact System Patterns
- All artifacts must have: timestamp, content, type, contact_id
- Use discriminated unions for artifact types
- Create specific interfaces for each artifact type
- Always validate artifact data before storing

## Loop Management Patterns
- Loops are special artifacts with status tracking
- Use enums for loop states: QUEUED, ACTIVE, PENDING, CLOSED
- Include ownership tracking (whose turn it is)
- Implement proper state transitions

## Testing Preferences
- Write unit tests for utilities and hooks
- Use React Testing Library for component tests
- Mock Supabase client in tests
- Test user interactions, not implementation details

## Comments & Documentation
- Use JSDoc for exported functions
- Explain business logic with inline comments
- Document complex algorithms or data transformations
- Keep comments up-to-date with code changes

## Git Conventions
- Use conventional commits: feat, fix, docs, style, refactor, test, chore
- Keep commits small and focused
- Write descriptive commit messages
- Use feature branches for new functionality
- After an update has been completed and merged into main, update the CHANGELOG.md and index.md files to reflect the current state

Remember: 
- Always prioritize user experience and data privacy
- Keep the artifact foundation as the core abstraction
- Build iteratively - start simple and add complexity
- Focus on the relationship intelligence workflow