# Connection OS Development Rules

## Tech Stack
- Next.js 14 with App Router and TypeScript
- Supabase for database and auth
- Material-UI (MUI) v5 for components
- Tailwind CSS for custom styling
- Zustand for client state management
- TanStack Query for server state

## 🚨 CRITICAL DATABASE ACCESS RULES

### **NEVER use npx with Supabase commands - CLI is installed globally**
Always use `supabase` directly, never `npx supabase`

### **Database Access Pattern (MANDATORY)**
**NEVER hardcode credentials. ALWAYS use secure dynamic patterns:**

```bash
# Step 1: Ensure project is linked
supabase link --project-ref zepawphplcisievcdugz

# Step 2: Use established connection string (verified working pattern)
CONNECTION_STRING="postgresql://postgres.zepawphplcisievcdugz:fzm_BEJ7agw5ehz6tcj@aws-0-us-west-1.pooler.supabase.com:5432/postgres"

# Step 3: Execute queries
psql "$CONNECTION_STRING" -c "YOUR_SQL_QUERY_HERE"

# Common patterns:
psql "$CONNECTION_STRING" -c "\dt"  # List tables
psql "$CONNECTION_STRING" -c "\d contacts"  # Describe table
psql "$CONNECTION_STRING" -c "SELECT id, name FROM contacts WHERE name ILIKE '%search%';"

# For complex multi-line queries, use single quotes to preserve formatting
psql "$CONNECTION_STRING" -c "
  SELECT id, name, title, company 
  FROM contacts 
  WHERE is_self_contact = true 
  LIMIT 1;
"
```

### **Database Safety Rules**
- NEVER run destructive operations without explicit user approval
- ALWAYS use WHERE clauses for UPDATE/DELETE operations
- ALWAYS test queries on single records first (add LIMIT 1)
- NEVER use `supabase db reset` or other data-wiping commands

### **Migration Patterns**
```bash
# Generate timestamp
TIMESTAMP=$(python3 -c 'import datetime; print(datetime.datetime.now().strftime("%Y%m%d%H%M%S"))')

# Create migration
touch "supabase/migrations/${TIMESTAMP}_migration_name.sql"

# Apply to cloud (auto-confirm)
echo "Y" | supabase db push

# Generate types after schema changes
supabase gen types typescript --linked > src/lib/supabase/database.types.ts
```

## 🚀 EDGE FUNCTION ARCHITECTURE (ESTABLISHED)

### **Unified Processing Pattern**
- `parse-artifact` is the unified edge function for ALL artifact AI processing
- All database triggers call `parse-artifact`, NOT specialized functions
- Internal routing based on artifact type and metadata
- NEVER create separate edge functions for different artifact types

### **Edge Function Testing & Management**
```bash
# 🚨 CRITICAL: Edge functions are triggered AUTOMATICALLY by database triggers
# You do NOT need to call edge functions directly - they trigger when status changes

# ✅ CORRECT - Trigger AI processing by changing database status
CONNECTION_STRING="postgresql://postgres.zepawphplcisievcdugz:fzm_BEJ7agw5ehz6tcj@aws-0-us-west-1.pooler.supabase.com:5432/postgres"

# To reprocess an artifact, simply reset its status to 'pending'
psql "$CONNECTION_STRING" -c "
UPDATE artifacts 
SET ai_parsing_status = 'pending', 
    ai_processing_started_at = NULL, 
    ai_processing_completed_at = NULL 
WHERE id = 'your-artifact-uuid-here';"

# The database trigger will automatically call parse-artifact edge function
# No manual edge function calls needed!

# ❌ WRONG - Don't call edge functions directly unless debugging
# curl -X POST 'https://zepawphplcisievcdugz.supabase.co/functions/v1/parse-artifact' ...

# ✅ Management commands
supabase functions deploy parse-artifact  # Deploy function updates
supabase functions list                   # List all functions and status

# ✅ Check processing status
psql "$CONNECTION_STRING" -c "
SELECT id, ai_parsing_status, ai_processing_started_at, ai_processing_completed_at 
FROM artifacts 
WHERE ai_parsing_status IN ('pending', 'processing') 
ORDER BY created_at DESC LIMIT 10;"

# Note: For debugging, check Supabase dashboard or use database queries to track processing
# Database triggers handle all automatic processing
```

## Project Structure
```
src/
  app/                    # Next.js app router pages
    (dashboard)/          # Dashboard layout group
  components/
    ui/                   # Reusable UI components
    features/             # Feature-specific components
  lib/
    supabase/            # Supabase client and types
    utils/               # Utility functions
    hooks/               # Custom hooks
    stores/              # Zustand stores
  types/                 # TypeScript type definitions
```

## Code Style Preferences

### TypeScript
- Use strict mode
- Prefer `interface` over `type` for object shapes
- Use `type` for unions and primitives
- Always define return types for functions
- Use proper generic constraints

### React Patterns
- Use functional components exclusively
- Prefer custom hooks for logic extraction
- Use React.memo() for expensive components
- Always use proper dependency arrays in useEffect

### Imports
- Group imports: React, third-party, internal components, utilities
- Use absolute imports with @ alias for src/
- Prefer named exports over default exports (except for pages)

### Component Structure
```typescript
interface ComponentProps {
  // Props interface
}

export const ComponentName = ({ prop1, prop2 }: ComponentProps) => {
  // Hooks at top
  // Event handlers
  // Render logic
  
  return (
    // JSX
  );
};
```

### MUI + Tailwind Integration
- Use MUI components for structure (Box, Container, Typography)
- Use Tailwind for spacing, sizing, and custom styles
- Prefer MUI's sx prop over className when using MUI components
- Use Tailwind classes for layout and spacing

### Database Patterns
- Use Supabase generated types
- Create custom hooks for database operations
- Always handle loading and error states
- Use optimistic updates where appropriate

### File Naming
- Components: PascalCase (ContactCard.tsx)
- Hooks: camelCase starting with 'use' (useContacts.ts)
- Utilities: camelCase (formatDate.ts)
- Pages: lowercase with hyphens (contact-details/page.tsx)

### State Management
- Use Zustand for client-side state that needs to persist across components
- Use TanStack Query for server state and caching
- Keep component state local when possible
- Use proper TypeScript types for all stores

### Error Handling
- Always wrap API calls in try-catch
- Use React Error Boundaries for component errors
- Show user-friendly error messages
- Log errors for debugging

### Performance
- Use React.memo for expensive renders
- Implement proper loading states
- Use Suspense boundaries where appropriate
- Optimize images with Next.js Image component

## Supabase Conventions
- Use Row Level Security (RLS) for all tables
- Create typed clients using generated types
- Use real-time subscriptions sparingly
- Prefer edge functions for complex server logic

## Artifact System Patterns
- All artifacts must have: timestamp, content, type, contact_id
- Use discriminated unions for artifact types
- Create specific interfaces for each artifact type
- Always validate artifact data before storing

## Loop Management Patterns
- Loops are special artifacts with status tracking
- Use enums for loop states: QUEUED, ACTIVE, PENDING, CLOSED
- Include ownership tracking (whose turn it is)
- Implement proper state transitions

## Testing Preferences
- Write unit tests for utilities and hooks
- Use React Testing Library for component tests
- Mock Supabase client in tests
- Test user interactions, not implementation details

## Comments & Documentation
- Use JSDoc for exported functions
- Explain business logic with inline comments
- Document complex algorithms or data transformations
- Keep comments up-to-date with code changes

## Git Conventions
- Use conventional commits: feat, fix, docs, style, refactor, test, chore
- Keep commits small and focused
- Write descriptive commit messages
- Use feature branches for new functionality

Remember: 
- Always prioritize user experience and data privacy
- Keep the artifact foundation as the core abstraction
- Build iteratively - start simple and add complexity
- Focus on the relationship intelligence workflow
- ALWAYS follow INITIATE.md patterns for database access and edge functions